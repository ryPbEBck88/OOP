"""
Создайте класс Triangle, в котором реализованы следующие методы
    1. метод __init__, принимающий три стороны треугольника
    2. метод is_exists, который отвечает на вопрос существует ли треугольник
       с текущими сторонами
       Треугольник существует, если каждая сторона треугольника меньше суммы
       двух других сторон.
    3. метод is_equilateral, который проверяет является ли треугольник
       равносторонним
       Треугольник называется равносторонним, если у него все стороны равны
    4. метод is_isosceles, который проверяет является ли треугольник
       равнобедренным и существующим.
       Треугольник называется равнобедренным, если у него две стороны равны
"""


class Triangle:
    """Класс для работы с треугольниками."""

    def __init__(self, a: int, b: int, c: int) -> None:
        """
        Инициализируем стороны треугольника.

        :param a: Длина первой стороны треугольника.
        :param b: Длина второй стороны треугольника.
        :param c: Длина третьей стороны треугольника.
        """
        self.a = a
        self.b = b
        self.c = c

    def is_exists(self) -> bool:
        """Проверяет, существует ли треугольник с заданными сторонами."""
        sort_triangle = sorted((self.a, self.b, self.c))
        return sort_triangle[0] + sort_triangle[1] > sort_triangle[2]

    def is_equilateral(self) -> bool:
        """Проверяет, является ли треугольник равносторонним."""
        return self.a == self.b == self.c

    def is_isosceles(self) -> bool:
        """Проверяет, является ли треугольник равнобедренным."""
        return (len(set((self.a, self.b, self.c))) < 3) and self.is_exists()
